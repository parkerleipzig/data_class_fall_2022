knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(lubridate)
library(readxl)
library(ggthemes)
library(sf)
library(leaflet)
public_transportation <- read_excel("public_transportation/public_transportation.xlsx")
drive_to_work <- read_excel("public_transportation/drive_to_work.xlsx")
no_car <- read_excel("public_transportation/no_car_access.xlsx")
median_income <- read_excel("public_transportation/median_income.xlsx")
pop_white <- read_excel("public_transportation/population_white.xlsx")
pop_black <- read_excel("population_black/population_black.xlsx")
pop_hisp <- read_excel("population_black/population_hispanic.xlsx")
pop_asian <- read_excel("population_black/population_asian.xlsx")
# 5 Baltimore neighborhoods that use public transportation the most to get to work
max_public_transportation <- public_transportation %>%
as.data.frame() %>%
clean_names() %>%
arrange(desc(x2020_data)) %>%
slice_max(x2020_data, n=5)
# 5 Baltimore neighborhoods that use public transportation the least to get to work
min_public_transportation <- public_transportation %>%
as.data.frame() %>%
clean_names() %>%
slice_min(x2020_data, n=5)
# Output dataframes
max_public_transportation
min_public_transportation
# inner join neighborhoods that use public transportation the most with income data
median_income <- median_income %>%
clean_names()
max_transit_income <- max_public_transportation %>%
clean_names() %>%
inner_join(median_income, by="community")
names(max_transit_income)[names(max_transit_income) == "x2020_data.x"] <- "high_public_transport"
names(max_transit_income)[names(max_transit_income) == "x2020_data.y"] <- "2020_income"
# inner join neighborhoods that use public transportation the least with income data
min_transit_income <- min_public_transportation %>%
clean_names() %>%
inner_join(median_income, by="community")
names(min_transit_income)[names(min_transit_income) == "x2020_data.x"] <- "low_public_transport"
names(min_transit_income)[names(min_transit_income) == "x2020_data.y"] <- "2020_income"
# output dataframes
max_transit_income
min_transit_income
# clean the names of all race dataframes so they join easily
pop_asian <- pop_asian %>%
clean_names()
pop_white <- pop_white %>%
clean_names()
pop_black <- pop_black %>%
clean_names()
pop_hisp <- pop_hisp %>%
clean_names()
# inner join race dataframes with the top public transport use and income dataframe
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "high_public_transport"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "asian_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y"] <- "black_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# inner join race dataframes with the minimum public transport use and income dataframe
min_transit_race <- min_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "low_public_transport"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "asian_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y"] <- "black_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# Output dataframes
max_transit_race
min_transit_race
drive_to_work <- drive_to_work %>%
clean_names()
low_public_high_drive <- min_public_transportation %>%
clean_names() %>%
inner_join(drives_to_work, by="community")
drive_to_work <- drive_to_work %>%
clean_names()
low_public_high_drive <- min_public_transportation %>%
clean_names() %>%
inner_join(drive_to_work, by="community")
names(low_public_high_drive)[names(low_public_high_drive) == "x2020_data.x"] <- "low_public_transport"
names(low_public_high_drive)[names(low_public_high_drive) == "x2020_data.y"] <- "drive_to_work"
low_public_high_drive
no_car <- no_car %>%
clean_names()
high_public_low_drive <- max_public_transportation %>%
clean_names() %>%
inner_join(no_car, by="community")
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.x"] <- "high_public_transport"
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.y"] <- "no_car"
high_public_low_drive
no_car <- no_car %>%
clean_names()
high_public_low_drive <- max_public_transportation %>%
clean_names() %>%
inner_join(no_car, by="community")
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.x"] <- "high_public_transport"
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.y"] <- "no_car"
high_public_low_drive
#| echo: false
print("the code will be hidden in the rendered html document, but this will output")
#| output: false
library(rvest)
library(tidyverse)
library(janitor)
knitr::include_graphics(rep("assets/images/rvest1.png"))
sboe_url <- "https://elections.maryland.gov/elections/2022/primary_results/gen_detail_results_2022_1_1_Republican.html"
knitr::include_graphics(rep("assets/images/rvest2.png"))
# read in the html
results <- sboe_url %>%
read_html()
# display the html below
results
knitr::include_graphics(rep("assets/images/rvest3.png"))
knitr::include_graphics(rep("assets/images/rvest4.png"))
# read in the html and extract all the tables
results <- sboe_url %>%
read_html() %>%
html_table()
# show the dataframe
results
# Read in all html from table, store all tables on page as nested list of dataframes.
results <- sboe_url %>%
read_html() %>%
html_table()
# Just keep the first dataframe in our list
results <- results[[1]]
# show the dataframe
results
# Read in all html from table, get the HTML table.
results <- sboe_url %>%
read_html() %>%
html_table()
# Standardize column headers with rename()
# remove last row with slice()
# apply parse_number to columns 2,3,4 and 5.
results <- results[[1]] %>%
clean_names() %>%
rename(cox = 2, ficker = 3, schulz = 4, werner = 5) %>%
slice(-25) %>%
mutate(across(c(2:5), parse_number))
# show the dataframe
results
#| echo: true
#| eval: false
print("Set this way, the code should display, but the output should not show up on render")
#| echo: false
#| eval: true
print("Set this way, the code shouldnot display, but the output should be visible on render")
#| echo: true
#| eval: true
print("Set this way, the code should display and the output should show up on render")
#| echo: false
#| eval: false
print("Set this way, the code shouldnot display and the output should not be visible on render")
#| echo: false
#| eval: false
print("Set this way, the code shouldnot display and the output should not be visible on render")
#| echo: true
#| eval: true
print("Set this way, the code should display and the output should show up on render")
| echo: true
echo: true
| echo: false
echo: false
execute:
echo: false
echo: true
