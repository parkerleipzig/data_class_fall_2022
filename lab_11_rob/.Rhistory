library(tidyverse)
library(janitor)
###
# Spotify API package
###
install.packages('spotifyr')
library(spotifyr)
###
# tidycensus
###
# library(tidycensus)
###
# Store your passwords to access the spotify api
###
Sys.setenv(SPOTIFY_CLIENT_ID = '7f1acf85695b4134adda4ba0ac38aaa6')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'c55a984bf78c4d8bb68243e02ba6892a')
artist <- "taylor swift"
###
# Set artist
###
artist <- "taylor swift"
###
# Get artist discography
###
taylor_swift_discography <- get_discography(artist, get_spotify_access_token())
###
# Write it out because it takes a while to load
###
write_rds(taylor_swift_discography,"data/taylor_swift_discography.rds")
# Note if API doesn't work, a copy of taylor swift discography is in the data folder for loading.
View(taylor_swift_discography)
taylow_swift_discography %>%
get_artist_top_tracks(id, market = "US",
authorization = get_spotify_access_token(),
include_meta_info = FALSE)
get_artist_top_tracks(6p2HnfM955TI1bX34dkLnI, market = "US",
get_artist_top_tracks("6p2HnfM955TI1bX34dkLnI", market = "US",
authorization = get_spotify_access_token(),
include_meta_info = FALSE)
library(spotifyr)
backseat_lovers <- get_artist_top_tracks("the backseat lovers")
rtist <- "the backseat lovers"
backseat_lovers_discography <- get_discography(artist, get_spotify_access_token())
artist <- "the backseat lovers"
backseat_lovers_discography <- get_discography(artist, get_spotify_access_token())
yes
artist <- "the backseat lovers"
backseat_lovers_discography <- get_discography(artist, get_spotify_access_token())
View(backseat_lovers_discography)
backseat_lovers_discography %>%
arrange(-tempo) %>%
select(track_name,tempo,duration_ms) %>%
head(10) %>%
kable()
backseat_lovers_discography %>%
arrange(-tempo) %>%
select(track_name,tempo,duration_ms) %>%
head(10)
library(ggplot)
library(ggthemes)
top_tempo %>% backseat_lovers_discography
top_tempo <- backseat_lovers_discography %>%
arrange(-tempo) %>%
select(track_name,tempo,duration_ms) %>%
head(10)
top_tempo <- backseat_lovers_discography %>%
arrange(-tempo) %>%
select(track_name,tempo,duration_ms) %>%
group_by(album_name) %>%
head(10)
top_tempo <- backseat_lovers_discography %>%
group_by(album_name) %>%
arrange(-tempo) %>%
select(track_name,tempo,duration_ms) %>%
head(10)
View(top_tempo)
top_tempo <- backseat_lovers_discography %>%
arrange(-tempo) %>%
select(album_name,track_name,tempo,duration_ms) %>%
group_by(album_name) %>%
head(10)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point()
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=3, vjust=0) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0.5, vjust=0) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=1, vjust=0) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=2) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=1) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=1.5) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo <- backseat_lovers_discography %>%
arrange(-tempo) %>%
select(album_name,track_name,tempo,duration_ms) %>%
group_by(album_name) %>%
head(10)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0.5) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
scale_x_continuous(breaks=c(1:200)) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
scale_x_continuous(limits=c(1:200)) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
scale_x_continuous(limits=c(1,200)) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
scale_x_continuous(limits=c(1,300)) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
library(dplyr)
install.packages("devtools")
library(ggrepel)
install.packages("devtools")
library(ggthemes)
library(ggrepel)
install.packages("devtools")
devtools::install_github("slowkow/ggrepel")
library(ggthemes)
library(ggrepel)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
scale_x_continuous(limits=c(1,300)) +
geom_text_repel(data=filter(results, padj<0.05), aes(label=Gene)) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text(aes(label=track_name),hjust=0, vjust=0) +
scale_x_continuous(limits=c(1,300)) +
geom_text_repel(data=filter(tempo, duration_ms<0.05), aes(label=Gene)) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
top_tempo %>%
ggplot(aes(x = tempo, y = duration_ms)) +
geom_point() +
geom_text_repel(aes(label=track_name),hjust=0, vjust=0) +
scale_x_continuous(limits=c(1,300)) +
labs(
title = "Length of Backseat Lovers Songs with the 10 Highest Tempos",
x = "Tempo",
y = "Length of Song",
caption = "source: Spotify API Data - By: Parker Leipzig"
)
View(top_tempo)
