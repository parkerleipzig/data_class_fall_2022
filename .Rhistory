income_vacancy <- median_income %>%
inner_join(vacant_houses, by="community") %>%
arrange(desc(income_2020)) %>%
select(community, income_2010, income_2020, vacant_2010, vacant_2020) %>%
filter((community=="Greater Mondawmin")|(community=="Penn North/Reservoir Hill")|(community=="Midtown")| (community=="Baltimore City"))
income_vacancy
library(tidyverse)
library(janitor)
library(ggthemes)
library(dplyr)
library(ggrepel)
income_vacancy %>%
ggplot(aes(x = community)) +
geom_point() +
geom_text_repel(aes(label=community),hjust=0, vjust=0) +
#scale_x_continuous(limits=c(1,300)) +
labs(
title = "Income and Vacancy of Baltimore Neighborhoods 2010 to 2020",
x = "Community",
caption = "source: BNIA Data - By: Parker Leipzig"
)
income_vacancy %>%
ggplot(aes(x = community)) +
geom_line(aes(y=income_2010), color = "blue") +
geom_line(aes(y=income_2020), color = "green") +
geom_line(aes(y=vacant_2010), color = "red") +
geom_line(aes(y=vacant_2020), color = "yellow")
labs(
title = "Income and Vacancy of Baltimore Neighborhoods 2010 to 2020",
x = "Community",
caption = "source: BNIA Data - By: Parker Leipzig"
)
income_vacancy %>%
ggplot(aes(x = community)) +
geom_line(aes(y=income_2010$Midtown), color = "blue") +
#geom_line(aes(y=income_2020), color = "green") +
#geom_line(aes(y=vacant_2010), color = "red") +
#geom_line(aes(y=vacant_2020), color = "yellow")
labs(
title = "Income and Vacancy of Baltimore Neighborhoods 2010 to 2020",
x = "Community",
caption = "source: BNIA Data - By: Parker Leipzig"
)
knitr::opts_chunk$set(echo = TRUE)
baltimore_shape <- readRDS("neighborhood.shp")
library(tidyverse)
library(janitor)
library(lubridate)
library(readxl)
library(ggthemes)
library(sf)
library(leaflet)
baltimore_shape <- st_read("CSA_NSA_Tracts.shp")
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/CSA_NSA_Tracts.shp")
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
View(baltimore_shape)
public_transportation <- read_excel("public_transportation/public_transportation.xlsx")
drive_to_work <- read_excel("public_transportation/drive_to_work.xlsx")
no_car <- read_excel("public_transportation/no_car_access.xlsx")
median_income <- read_excel("public_transportation/median_income.xlsx")
pop_white <- read_excel("public_transportation/population_white.xlsx")
pop_black <- read_excel("population_black/population_black.xlsx")
pop_hisp <- read_excel("population_black/population_hispanic.xlsx")
pop_asian <- read_excel("population_black/population_asian.xlsx")
geo_public_transportation <- baltimore_shape %>%
clean_names() %>%
inner_join(public_transportation, by="community")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(lubridate)
library(readxl)
library(ggthemes)
library(sf)
library(leaflet)
public_transportation <- read_excel("public_transportation/public_transportation.xlsx")
drive_to_work <- read_excel("public_transportation/drive_to_work.xlsx")
no_car <- read_excel("public_transportation/no_car_access.xlsx")
median_income <- read_excel("public_transportation/median_income.xlsx")
pop_white <- read_excel("public_transportation/population_white.xlsx")
pop_black <- read_excel("population_black/population_black.xlsx")
pop_hisp <- read_excel("population_black/population_hispanic.xlsx")
pop_asian <- read_excel("population_black/population_asian.xlsx")
# 5 Baltimore neighborhoods that use public transportation the most to get to work
max_public_transportation <- public_transportation %>%
as.data.frame() %>%
clean_names() %>%
arrange(desc(x2020_data)) %>%
slice_max(x2020_data, n=5)
# 5 Baltimore neighborhoods that use public transportation the least to get to work
min_public_transportation <- public_transportation %>%
as.data.frame() %>%
clean_names() %>%
slice_min(x2020_data, n=5)
# Output dataframes
max_public_transportation
min_public_transportation
# inner join neighborhoods that use public transportation the most with income data
median_income <- median_income %>%
clean_names()
max_transit_income <- max_public_transportation %>%
clean_names() %>%
inner_join(median_income, by="community")
names(max_transit_income)[names(max_transit_income) == "x2020_data.x"] <- "high_public_transport"
names(max_transit_income)[names(max_transit_income) == "x2020_data.y"] <- "2020_income"
# inner join neighborhoods that use public transportation the least with income data
min_transit_income <- min_public_transportation %>%
clean_names() %>%
inner_join(median_income, by="community")
names(min_transit_income)[names(min_transit_income) == "x2020_data.x"] <- "low_public_transport"
names(min_transit_income)[names(min_transit_income) == "x2020_data.y"] <- "2020_income"
# output dataframes
max_transit_income
min_transit_income
# clean the names of all race dataframes so they join easily
pop_asian <- pop_asian %>%
clean_names()
pop_white <- pop_white %>%
clean_names()
pop_black <- pop_black %>%
clean_names()
pop_hisp <- pop_hisp %>%
clean_names()
# inner join race dataframes with the top public transport use and income dataframe
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "high_public_transport"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "asian_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y"] <- "black_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# inner join race dataframes with the minimum public transport use and income dataframe
min_transit_race <- min_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "low_public_transport"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "asian_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y"] <- "black_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# Output dataframes
max_transit_race
min_transit_race
drive_to_work <- drive_to_work %>%
clean_names()
low_public_high_drive <- min_public_transportation %>%
clean_names() %>%
inner_join(drive_to_work, by="community")
names(low_public_high_drive)[names(low_public_high_drive) == "x2020_data.x"] <- "low_public_transport"
names(low_public_high_drive)[names(low_public_high_drive) == "x2020_data.y"] <- "drive_to_work"
low_public_high_drive
no_car <- no_car %>%
clean_names()
high_public_low_drive <- max_public_transportation %>%
clean_names() %>%
inner_join(no_car, by="community")
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.x"] <- "high_public_transport"
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.y"] <- "no_car"
high_public_low_drive
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
geo_public_transportation <- baltimore_shape %>%
clean_names() %>%
inner_join(public_transportation, by="community")
View(public_transportation)
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
geo_public_transportation <- baltimore_shape %>%
clean_names() %>%
inner_join(public_transportation, by="Community")
geo_public_transportation <- baltimore_shape %>%
inner_join(public_transportation, by="Community")
View(geo_public_transportation)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data=geo_public_transportation) %>%
addCircles(data=geo_public_transportation)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data=baltimore_shape) %>%
addCircles(data=geo_public_transportation)
ggplot() +
geom_sf(data=geo_public_transportation)
geo_public_transportation <- baltimore_shape %>%
inner_join(public_transportation, by="Community") %>%
st_as_sf()
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=x2020_data))
names(geo_public_transportation)[names(geo_public_transportation) == "2020_Data"] <- "public_transportation_pct"
View(geo_public_transportation)
geo_public_transportation <- baltimore_shape %>%
inner_join(public_transportation, by="Community") %>%
st_as_sf()
names(geo_public_transportation)[names(geo_public_transportation) == "2020_Data"] <- "public_transportation_pct"
View(geo_public_transportation)
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=x2020_Data))
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=x2020_Data))
geo_public_transportation <- baltimore_shape %>%
inner_join(public_transportation, by="Community") %>%
st_as_sf() %>%
rename(public_transportation_pct = x2020_data)
geo_public_transportation <- baltimore_shape %>%
clean_names() %>%
inner_join(public_transportation, by="Community") %>%
st_as_sf() %>%
rename(public_transportation_pct = x2020_data)
geo_public_transportation <- baltimore_shape %>%
inner_join(public_transportation, by="Community") %>%
clean_names() %>%
st_as_sf() %>%
rename(public_transportation_pct = x2020_data)
View(geo_public_transportation)
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=public_transportation_pct))
library(RColorBrewer)
mybins <- c(0,10,20,50,100,500,Inf)
mypalette <- colorBin( palette="YlOrBr", domain=geo_public_transportation, na.color="transparent", bins=mybins)
# Prepare the text for tooltips:
mytext <- paste(
"Community: ", geo_public_transportation$community,"<br/>",
"Percent Uses Public Transportation: ", geo_public_transportation$public_transportation_pct, "<br/>",
lapply(htmltools::HTML))
library(RColorBrewer)
mybins <- c(0,10,20,50,100,500,Inf)
mypalette <- colorBin( palette="YlOrBr", domain=geo_public_transportation, na.color="transparent", bins=mybins)
# Prepare the text for tooltips:
mytext <- paste(
"Community: ", geo_public_transportation$community, "<br/>",
"Percent Uses Public Transportation: ", geo_public_transportation$public_transportation_pct, "<br/>",
lapply(htmltools::HTML))
library(RColorBrewer)
mybins <- c(0,10,20,50,100,500,Inf)
mypalette <- colorBin( palette="YlOrBr", domain=geo_public_transportation, na.color="transparent", bins=mybins)
# Final Map
leaflet(geo_public_transportation) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(POP2005),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.3,
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend( pal=mypalette, values=~POP2005, opacity=0.9, title = "Percent Community Uses Public Transportation", position = "bottomleft" )
library(RColorBrewer)
mybins <- c(0,10,20,50,100,500,Inf)
mypalette <- colorBin( palette="YlOrBr", domain=geo_public_transportation, na.color="transparent", bins=mybins)
# Final Map
leaflet(geo_public_transportation) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons(
fillColor = ~mypalette(POP2005),
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.3,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend( pal=mypalette, values=~POP2005, opacity=0.9, title = "Percent Community Uses Public Transportation", position = "bottomleft" )
library(RColorBrewer)
mybins <- c(0,10,20,50,100,500,Inf)
mypalette <- colorBin( palette="YlOrBr", domain=geo_public_transportation, na.color="transparent", bins=mybins)
# Final Map
leaflet(geo_public_transportation) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons(
stroke=TRUE,
fillOpacity = 0.9,
color="white",
weight=0.3,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)
) %>%
addLegend( pal=mypalette, values=~POP2005, opacity=0.9, title = "Percent Community Uses Public Transportation", position = "bottomleft" )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(lubridate)
library(readxl)
library(ggthemes)
library(sf)
library(leaflet)
public_transportation <- read_excel("public_transportation/public_transportation.xlsx")
drive_to_work <- read_excel("public_transportation/drive_to_work.xlsx")
no_car <- read_excel("public_transportation/no_car_access.xlsx")
median_income <- read_excel("public_transportation/median_income.xlsx")
pop_white <- read_excel("public_transportation/population_white.xlsx")
pop_black <- read_excel("population_black/population_black.xlsx")
pop_hisp <- read_excel("population_black/population_hispanic.xlsx")
pop_asian <- read_excel("population_black/population_asian.xlsx")
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
geo_public_transportation <- baltimore_shape %>%
inner_join(public_transportation, by="Community") %>%
clean_names() %>%
st_as_sf() %>%
rename(public_transportation_pct = x2020_data)
#ggplot() +
#geom_sf(data=geo_public_transportation, aes(fill=public_transportation_pct))
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data=baltimore_shape, weight=1, fill="purple") %>%
addCircles(data=geo_public_transportation,
label=geo_public_transportation$community)
baltimore_shape <- leaflet(geo_public_transportation) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude,
lat = ~location.latitude)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = geo_public_transportation ,
fillColor = ~pal(geo_public_transportation$public_transportation_pct),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(pal = pal,
values = geo_public_transportation$public_transportation_pct,
position = "bottomright",
title = "Percent in Community that Uses Public Transportation")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = geo_public_transportation ,
fillColor = ~pal(geo_public_transportation$public_transportation_pct),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(values = geo_public_transportation$public_transportation_pct,
position = "bottomright",
title = "Percent in Community that Uses Public Transportation")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = geo_public_transportation ,
fillColor = ~pal(geo_public_transportation$public_transportation_pct),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(colors,
values = geo_public_transportation$public_transportation_pct,
position = "bottomright",
title = "Percent in Community that Uses Public Transportation")
leaflet(geo_public_transportation) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = geo_public_transportation ,
fillColor = ~pal(geo_public_transportation$public_transportation_pct),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(colors,
values = geo_public_transportation$public_transportation_pct,
position = "bottomright",
title = "Percent in Community that Uses Public Transportation")
pal <- colorQuantile("YlGn", NULL, n = 5)
state_popup <- paste0("<strong>Neighborhood: </strong>",
geo_public_transportation$community,
"<br><strong>Percent that Uses Public Transportation </strong>",
geo_public_transportation$public_transportation_pct)
leaflet(data = geo_public_transportation) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(fillColor = ~pal,
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = state_popup)
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=public_transportation_pct))
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=public_transportation_pct)) +
labs(title = "Pct of People that Use Public Transportation in Balt Neighborhoods",
subtitle ="Citywide average: 17.4 percent",
caption = "BNIA Data 2020, Graphic by Parker Leipzig and Victoria Stavish",
x = "",
y = "Pct that take Public Transportation"
)
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=public_transportation_pct)) +
labs(title = "Pct of People that Use Public Transportation in Balt Neighborhoods",
subtitle ="Citywide average: 17.4 percent",
caption = "BNIA Data 2020, Graphic by Parker Leipzig and Victoria Stavish",
)
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=public_transportation_pct)) +
scale_fill_gradient(low="grey",high="blue") +
labs(title = "Pct of People that Use Public Transportation in Balt Neighborhoods",
subtitle ="Citywide average: 17.4 percent",
caption = "BNIA Data 2020, Graphic by Parker Leipzig and Victoria Stavish",
)
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
geo_public_transportation <- baltimore_shape %>%
inner_join(public_transportation, by="Community") %>%
clean_names() %>%
st_as_sf() %>%
rename(public_transportation_pct = x2020_data)
ggplot() +
geom_sf(data=geo_public_transportation, aes(fill=public_transportation_pct)) +
scale_fill_gradient(low="grey",high="blue") +
labs(title = "Pct of People that Use Public Transportation in Balt Neighborhoods",
subtitle ="Citywide average: 17.4 percent",
caption = "BNIA Data 2020, Graphic by Parker Leipzig and Victoria Stavish",
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(janitor)
library(lubridate)
library(readxl)
library(ggthemes)
library(sf)
library(leaflet)
public_transportation <- read_excel("public_transportation/public_transportation.xlsx")
drive_to_work <- read_excel("public_transportation/drive_to_work.xlsx")
no_car <- read_excel("public_transportation/no_car_access.xlsx")
median_income <- read_excel("public_transportation/median_income.xlsx")
pop_white <- read_excel("public_transportation/population_white.xlsx")
pop_black <- read_excel("population_black/population_black.xlsx")
pop_hisp <- read_excel("population_black/population_hispanic.xlsx")
pop_asian <- read_excel("population_black/population_asian.xlsx")
income_vacancy %>%
ggplot(aes(x = community)) +
geom_point(aes(y=income_2020), color = "#64D197", stroke=5) +
geom_point(aes(y=vacant_2020*1000), stroke=5, color = "#BE80B1") +
scale_y_continuous(
name = "2020 Income (Green)", limits=c(0, 62000), labels=scales::dollar_format(),
sec.axis = sec_axis(~./60000, name="2020 Percent Vacancies (Red)", labels = scales::percent))+
#scale_y_continuous(labels = scales::percent) +
labs(
title = "Income and Vacancies of Baltimore Neighborhoods 2020",
x = "Community",
caption = "source: BNIA Data - By: Parker Leipzig and Rob Wells"
)
library(tidyverse)
library(janitor)
library(ggthemes)
library(dplyr)
library(ggrepel)
median_income <- read_csv("median_income.csv") %>%
clean_names()
vacant_houses <- read_csv("vacant_houses.csv") %>%
clean_names()
income_vacancy <- median_income %>%
inner_join(vacant_houses, by="community") %>%
arrange(desc(income_2020)) %>%
select(community, income_2010, income_2020, vacant_2010, vacant_2020) %>%
filter((community=="Greater Mondawmin")|(community=="Midtown")| (community=="Baltimore City")) %>%
as.data.frame()
income_vacancy %>%
ggplot(aes(x = community)) +
geom_point(aes(y=income_2020), color = "#64D197", stroke=5) +
geom_point(aes(y=vacant_2020*1000), stroke=5, color = "#C47795") +
scale_y_continuous(
name = "2020 Income (Green)", limits=c(0, 62000), labels=scales::dollar_format(),
sec.axis = sec_axis(~./60000, name="2020 Percent Vacancies (Red)", labels = scales::percent))+
#scale_y_continuous(labels = scales::percent) +
labs(
title = "Income and Vacancies of Baltimore Neighborhoods 2020",
x = "Community",
caption = "source: BNIA Data - By: Parker Leipzig and Rob Wells"
)
income_vacancy %>%
ggplot(aes(x = community)) +
geom_point(aes(y=income_2020), color = "#64D197", stroke=5) +
geom_point(aes(y=vacant_2020*1000), stroke=5, color = "#E09986") +
scale_y_continuous(
name = "2020 Income (Green)", limits=c(0, 62000), labels=scales::dollar_format(),
sec.axis = sec_axis(~./60000, name="2020 Percent Vacancies (Pink)", labels = scales::percent))+
#scale_y_continuous(labels = scales::percent) +
labs(
title = "Income and Vacancies of Baltimore Neighborhoods 2020",
x = "Community",
caption = "source: BNIA Data - By: Parker Leipzig and Rob Wells"
)
income_vacancy %>%
ggplot(aes(x = community)) +
geom_point(aes(y=income_2020), color = "#64D197", stroke=5) +
geom_point(aes(y=vacant_2020*1000), stroke=5, color = "#E79E9E") +
scale_y_continuous(
name = "2020 Income (Green)", limits=c(0, 62000), labels=scales::dollar_format(),
sec.axis = sec_axis(~./60000, name="2020 Percent Vacancies (Pink)", labels = scales::percent))+
#scale_y_continuous(labels = scales::percent) +
labs(
title = "Income and Vacancies of Baltimore Neighborhoods 2020",
x = "Community",
caption = "source: BNIA Data - By: Parker Leipzig and Rob Wells"
)
